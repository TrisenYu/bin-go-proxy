// SPDX-LICENSE-IDENTIFIER: GPL-2.0-Only
// (C) 2024 Author: <kisfg@hotmail.com>
package protocol

import (
	crand "crypto/rand"
	"errors"
	"time"

	config "bingoproxy/config"
	cryptoprotect "bingoproxy/cryptoProtect"
	asymmetricciphers "bingoproxy/cryptoProtect/asymmetricCiphers"
	hashciphers "bingoproxy/cryptoProtect/hashCiphers"
	streamciphers "bingoproxy/cryptoProtect/streamCiphers"
	zipper "bingoproxy/cryptoProtect/zipper"
	defErr "bingoproxy/defErr"
	custom "bingoproxy/protocol/custom"
	service "bingoproxy/service/pingTimer"
	utils "bingoproxy/utils"
)

/*
invoke this after gaining the proxy pubkey.

	serialize the handshake-msg into bytes and encrypt with proxy's pubkey.
*/
func (c *Client) pPubEncryptHandShakeMsg(handshake *custom.HandShakeMsg) ([]byte, error) {
	serialization := make([]byte, 0)
	serialization = append(serialization, utils.Uint64ToLittleEndianBytes(handshake.Nonce)...)
	serialization = append(serialization, handshake.Kern...)
	serialization = append(serialization, handshake.Hasher...)
	serialization = append(serialization, handshake.Signature...)
	serialization = append(serialization, handshake.Timestamp...)
	encrypt_msg, err := c.ProxyAsymmCipher.PubEncrypt(serialization)
	return encrypt_msg, err
}

/* invoke this after generating pubkey */
func (c *Client) generateRN() (*custom.HandShakeMsg, error) {
	var (
		nonce_ed uint64 = 8 // nonce is defined as 8 bytes
		iv_ed           = nonce_ed + c.KeyLen + c.IvLen
	)
	rn := make([]byte, iv_ed-nonce_ed)
	_, err := crand.Reader.Read(rn)
	if err != nil {
		return nil, err
	}
	nonceIn64, nonce, err := custom.GenerateRandUint64WithByteRepresentation()
	if err != nil {
		return nil, err
	}

	timeStamp := []byte(custom.SafeResetLen())
	kern := []byte(nonce)
	kern = append(kern, rn...)
	kern = append(kern, timeStamp...)

	var (
		hasher    = c.HashCipher.CalculateHashOnce(kern)
		signature = make([]byte, c.AsymmCipher.GetSignatureLen())
	)
	_signature, err := c.AsymmCipher.PemSign(hasher)
	if err != nil {
		return nil, err
	}
	copy(signature, _signature)
	client_hello := custom.HandShakeMsg{
		Nonce:     nonceIn64,
		Kern:      rn,
		Hasher:    hasher,
		Signature: signature,
		Timestamp: timeStamp,
	}
	return &client_hello, nil
}

// Hard-encode HandShakeMsg.
func (c *Client) extractHandShakeMsg(msg []byte) (*custom.HandShakeMsg, error) {
	var (
		nonce_ed uint64 = 8 // nonce is defined as 8 bytes
		iv_ed           = nonce_ed + c.KeyLen + c.IvLen
		hash_ed         = iv_ed + c.HashCipher.GetHashLen()
		sign_ed         = hash_ed + c.AsymmCipher.GetSignatureLen()
	)
	if uint64(len(msg)) != custom.SafeReadTimeLen()+sign_ed {
		return &custom.HandShakeMsg{}, errors.New(custom.PROXY_FAKE_HANDSHAKE)
	}

	var handshakemsg custom.HandShakeMsg = custom.HandShakeMsg{
		Nonce:     utils.LittleEndianBytesToUint64([8]byte(msg[:nonce_ed])),
		Kern:      msg[nonce_ed:iv_ed],
		Hasher:    msg[iv_ed:hash_ed],
		Signature: msg[hash_ed:sign_ed],
		Timestamp: msg[sign_ed:],
	}

	return &handshakemsg, nil
}

/*
TODO: Remote handshake.

Client or Proxy will directly disconnect if any error emerges during Stage handshake.

Client send clientHello to login proxy.
	clientHello contains a crypto-suite number which indicates the corresponding crypto algorithms to be
	utilized and a access-token generated by login proxy beforehand.

Once the access-token is verified, proxy will generate its (pri, pub) key pair and send the pub key to client and wait for ack.
Otherwise this connection will be immediately aborted. This method is suitable for subsequent use.

After client acknowleges the PPUB, Client should send CPUB to proxy and wait for ack.
Once receiving ack, then generates a handshake-Msg and divides it into two parts, and the first part will possess 50~60 percent.

Send each part sequentially while receiving the proxy-handshakeMsg and wait for corresponding ack and verify the validation.

And then generate session key from the message and send `finish` to proxy and wait for proxy response.
*/

func (c *Client) SendClientHelloPayload(asym_cfg, flow_cfg, hash_cfg, zip_cfg, access_token string) error {
	var choice uint32 = 0x0000_0000

	switch asym_cfg {
	case `sm2`:
		fallthrough
	default:
		choice |= uint32(cryptoprotect.PICK_SM2)
		c.AsymmCipher = &asymmetricciphers.SM2{}
		c.ProxyAsymmCipher = &asymmetricciphers.SM2{}
		c.AsymmCipher.GenerateKeyPair()
	}

	switch flow_cfg {
	case `salsa20`:
		choice |= uint32(cryptoprotect.PICK_SALSA20) << 8
		c.StreamCipher = &streamciphers.Salsa20{}
	case `aes-ofb-256`:
		choice |= uint32(cryptoprotect.PICK_AES_OFB_256) << 8
		c.StreamCipher = &streamciphers.AES_OFB_256{}
	case `aes-ctr-256`:
		choice |= uint32(cryptoprotect.PICK_AES_CTR_256) << 8
		c.StreamCipher = &streamciphers.AES_CTR_256{}
	case `aes-gcm-256`: // not recommanded?
		choice |= uint32(cryptoprotect.PICK_AES_GCM_256) << 8
		c.StreamCipher = &streamciphers.AES_GCM_256{}
	case `sm4-ofb-128`:
		choice |= uint32(cryptoprotect.PICK_SM4_OFB_128) << 8
		c.StreamCipher = &streamciphers.SM4_OFB{}
	case `sm4-ctr-128`:
		choice |= uint32(cryptoprotect.PICK_SM4_CTR_128) << 8
		c.StreamCipher = &streamciphers.SM4_CTR{}
	case `sm4-gcm-128`:
		choice |= uint32(cryptoprotect.PICK_SM4_GCM_128) << 8
		c.StreamCipher = &streamciphers.SM4_GCM{}
	case `chacha20poly1305`:
		choice |= uint32(cryptoprotect.PICK_CHACHA20POLY_256) << 8
		c.StreamCipher = &streamciphers.Chacha20poly1305{}
	case `zuc`:
		fallthrough
	default:
		choice |= uint32(cryptoprotect.PICK_ZUC) << 8
		c.StreamCipher = &streamciphers.ZUC{}
	}

	c.KeyLen, c.IvLen = c.StreamCipher.GetKeyLen(), c.StreamCipher.GetIvLen()

	switch hash_cfg {
	case `sha256`:
		choice |= uint32(cryptoprotect.PICK_SHA256) << 16
		c.HashCipher = &hashciphers.Sha256{}
	case `sha3-256`:
		choice |= uint32(cryptoprotect.PICK_SHA3_256) << 16
		c.HashCipher = &hashciphers.Sha3_256{}
	case `sha384`:
		choice |= uint32(cryptoprotect.PICK_SHA256) << 16
		c.HashCipher = &hashciphers.Sha256{}
	case `sha3-384`:
		choice |= uint32(cryptoprotect.PICK_SHA3_384) << 16
		c.HashCipher = &hashciphers.Sha3_384{}
	case `sha512`:
		choice |= uint32(cryptoprotect.PICK_SHA512) << 16
		c.HashCipher = &hashciphers.Sha512{}
	case `sha3-512`:
		choice |= uint32(cryptoprotect.PICK_SHA3_512) << 16
		c.HashCipher = &hashciphers.Sha3_512{}
	case `blake2b256`:
		choice |= uint32(cryptoprotect.PICK_BLAKE2B256) << 16
		c.HashCipher = &hashciphers.Blake2b256{}
	case `blake2s256`:
		choice |= uint32(cryptoprotect.PICK_BLAKE2S256) << 16
		c.HashCipher = &hashciphers.Blake2s256{}
	case `blake2b384`:
		choice |= uint32(cryptoprotect.PICK_BLAKE2B384) << 16
		c.HashCipher = &hashciphers.Blake2b384{}
	case `blake2b512`:
		choice |= uint32(cryptoprotect.PICK_BLAKE2B512) << 16
		c.HashCipher = &hashciphers.Blake2b512{}
	case `sm3`:
		fallthrough
	default:
		choice |= uint32(cryptoprotect.PICK_SM3) << 16
		c.HashCipher = &hashciphers.SM3{}
	}

	switch zip_cfg {
	case `zlib`:
		choice |= uint32(cryptoprotect.PICK_ZLIB_COMP) << 24
		c.CompOption = &zipper.Zlib{}
	case `null`:
		fallthrough
	default:
		choice |= uint32(cryptoprotect.PICK_NULL_COMP) << 24
		c.CompOption = &zipper.IdCompresser{}
	}
	/* payload: {choice||token} */
	res := make([]byte, 4+len(access_token))
	copy(res[:4], utils.Uint32ToLittleEndianBytes(choice))
	copy(res[4:], []byte(access_token))

	cnt, err := c.MiProxy.Write(res)
	if cnt != uint(len(res)) || err != nil {
		err = defErr.StrConcat(`payload-len-mismatch or err:`, err)
	}
	return err
}

// step 1 wait for PPUB
func (c *Client) readStep1() error {
	shutdown := func() {
		c.wNeedBytes <- nil
		c.MiProxy.CloseConn()
	}
	ppub, _, err := c.MiProxy.Read()
	if err != nil {
		shutdown()
		return defErr.StrConcat(custom.RECV_COMP_PPUB_FAILURE, err)
	}
	dep, err := c.CompOption.DecompressMsg(ppub)
	if err != nil {
		shutdown()
		return err
	}
	c.wNeedBytes <- &dep
	return nil
}

// step 1 ack PPUB
func (c *Client) writeStep1() error {
	ppub := <-c.wNeedBytes
	if ppub == nil || uint64(len(*ppub)) != c.AsymmCipher.GetPubLen() {
		c.MiProxy.CloseConn()
		return errors.New(custom.INVALID_PPUB_LENGTH)
	}

	c.ProxyAsymmCipher.SetPub(ppub)
	now, res := custom.AckToTimestampHash(c.HashCipher, []byte(custom.ACKPPUB))
	// TODO: compress the ack-pub?
	cnt, err := c.MiProxy.Write(append(now, res...))
	currLen := custom.SafeGainTimestampHashLen()
	if uint64(cnt) != currLen || err != nil {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.SEND_ACKPPUB_FAILURE, err)
	}
	return nil
}

// step 2 wait for ack CPUB
func (c *Client) readStep2() error {
	ackcpub, _, err := c.MiProxy.Read()
	if !custom.AckFlowValidator(
		c.HashCipher, ackcpub, []byte(custom.ACKCPUB),
		c.ackTimCheck, &c.ackRec, c.pingRef, false) {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.INVALID_ACKCPUB, err)
	}
	return nil
}

// step 2 send CPUB
func (c *Client) writeStep2() error {
	if err := c.sendPub(); err != nil {
		c.MiProxy.CloseConn()
		return err
	}
	return nil
}

// step3 send and wait for ack of cflow1 | cflow2
func (c *Client) writeStep3(cflow []byte, turn int) error {
	time.Sleep(time.Microsecond * 10)
	// TODO: time sensitive and can we use another way to fend off side-channel attack?
	cf, err := c.CompOption.CompressMsg(cflow)
	if err != nil {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.COMPRESS_CFLOW_FAILURE, err)
	}
	cnt, err := c.MiProxy.Write(cf)
	if err != nil || cnt != uint(len(cf)) {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.SEND_COMP_CFLOW_FAILURE, err)
	}
	cack := <-c.wNeedBytes
	if cack == nil {
		c.MiProxy.CloseConn()
		return errors.New(`unable to gain cflow`)
	}
	var choice []byte
	switch turn {
	case 1:
		choice = []byte(custom.ACKCPK1)
	case 2:
		choice = []byte(custom.ACKCPK2)
	default:
		return errors.New(custom.C_PREFIX + custom.BI_INVALID_ACKCFLOW)
	}
	if !custom.AckFlowValidator(c.HashCipher, *cack, choice, c.ackTimCheck, &c.ackRec, c.pingRef, true) {
		c.MiProxy.CloseConn()
		return errors.New(custom.PARSE_ACKCFLOW_FAILURE)
	}
	return nil
}

// step3 wait for ackcflow1 | ackcflow2
func (c *Client) readStep3() error {
	ackcpk, cnt, err := c.MiProxy.Read()
	currLen := custom.SafeGainTimestampHashLen()
	if uint64(cnt) != currLen || err != nil {
		c.wNeedBytes <- nil
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.PARSE_ACKCFLOW_FAILURE, err)
	}
	c.wNeedBytes <- &ackcpk
	return nil
}

// step3 ack pflow1 | pflow2
func (c *Client) writeStep4(turn int) error {
	var choice []byte
	switch turn {
	case 1:
		choice = []byte(custom.ACKPPK1)
	case 2:
		choice = []byte(custom.ACKPPK2)
	default:
		return errors.New(custom.C_PREFIX + custom.BI_INVALID_ACKPFLOW)
	}
	if !<-c.rDoneSignal {
		c.MiProxy.CloseConn()
		return errors.New(custom.C_PREFIX + custom.BI_INNER_SIGNAL_FAILED)
	}
	now, res := custom.AckToTimestampHash(c.HashCipher, choice)
	cnt, err := c.MiProxy.Write(append(now, res...))
	if uint64(cnt) != custom.SafeGainTimestampHashLen() || err != nil {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.SEND_ACKPFLOW_FAILURE, err)
	}
	return nil
}

// step3 read pflow1 | pflow2
func (c *Client) readStep4() ([]byte, error) {
	shutdown := func(err error) ([]byte, error) {
		c.rDoneSignal <- false
		c.MiProxy.CloseConn()
		return []byte{}, err
	}
	pf, _, err := c.MiProxy.Read()
	if err != nil {
		return shutdown(err)
	}
	pflow, err := c.CompOption.DecompressMsg(pf)
	if err != nil {
		return shutdown(err)
	}
	c.rDoneSignal <- true
	return pflow, nil
}

func (c *Client) pflowConcatAndDecrypt(pflow1, pflow2 []byte) (*custom.HandShakeMsg, error) {
	enc_flow := append(pflow1, pflow2...)
	flow, err := c.AsymmCipher.PemDecrypt(enc_flow)
	if err != nil {
		c.MiProxy.CloseConn()
		return nil, defErr.StrConcat(
			custom.C_PREFIX+custom.BI_BAD_PEM_DECRYPTION,
			err)
	}
	presessionkey, err := c.extractHandShakeMsg(flow)
	if err != nil {
		c.MiProxy.CloseConn()
		return nil, err
	}
	return presessionkey, nil
}

// step 9: verify sign and check hash
func (c *Client) recheckHash(presessionkey *custom.HandShakeMsg) error {
	verified := c.ProxyAsymmCipher.PubVerify(presessionkey.Hasher, presessionkey.Signature)
	if !verified {
		c.MiProxy.CloseConn()
		return errors.New(custom.BI_SIGNATURE_FAILURE)
	}
	hashX := utils.Uint64ToLittleEndianBytes(presessionkey.Nonce)
	hashX = append(hashX, presessionkey.Kern...)
	hashX = append(hashX, presessionkey.Timestamp...)
	recheck_hash := c.HashCipher.CalculateHashOnce(hashX)
	status, descript := utils.CmpByte2Slices(recheck_hash, presessionkey.Hasher)
	if !status {
		c.MiProxy.CloseConn()
		return errors.New(custom.C_PREFIX + custom.BI_HASH_ACK_FAILURE + descript)
	}
	return nil
}

// step 10: generate sessionKey and wait for rn
func (c *Client) readChallenge(preKey *custom.HandShakeMsg) error {
	rn := c.rn
	keyIvLen := c.StreamCipher.GetKeyIvLen()
	tmpKey := custom.GenerateSessionKey(
		[]byte(preKey.Kern[:c.KeyLen]),
		rn.Kern,
		rn.Nonce,
		preKey.Nonce,
		c.StreamCipher,
		c.HashCipher,
	)
	c.StreamCipher.SetKey(tmpKey)
	c.StreamCipher.SetIv(preKey.Kern[c.KeyLen:keyIvLen])
	resp_rn, _, err := c.DecRead()
	status, _ := utils.CmpByte2Slices(resp_rn, rn.Kern)
	if !status {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.RN_INCONSISTENCY, err)
	}
	return nil
}

func (c *Client) writeFinish() error {
	curr, res := custom.AckToTimestampHash(c.HashCipher, []byte(custom.HANDHLT))
	cnt, err := c.EncWrite(append(curr, res...))
	currLen := custom.SafeGainTimestampHashLen() + c.StreamCipher.WithIvAttached()
	if uint64(cnt) != currLen || err != nil {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.C_PREFIX+custom.BI_ACK_FINISHED_FAILED, err)
	}
	return nil
}

// step 12 read finish
func (c *Client) readFinish() error {
	_finish, _, err := c.DecRead()
	if !custom.AckFlowValidator(
		c.HashCipher, _finish,
		[]byte(custom.HANDHLT),
		c.ackTimCheck,
		&c.ackRec, c.pingRef, false) || err != nil {
		c.MiProxy.CloseConn()
		return defErr.StrConcat(custom.C_PREFIX+custom.BI_ACK_FINISHED_FAILED, err)
	}
	return nil
}

func (c *Client) shakeHandReadCoroutine() (rerr error) {
	if !<-c.wNotifiedSignal {
		rerr = errors.New(custom.C_PREFIX + custom.BI_INVALID_HELLO)
		return
	}
	rerr = c.readStep1()
	if rerr != nil {
		return
	}
	rerr = c.readStep2()
	if rerr != nil {
		return
	}
	rerr = c.readStep3( /* 1 read ackcflow1 */ )
	if rerr != nil {
		return
	}
	pflow1, rerr := c.readStep4() // read pflow1
	if rerr != nil {
		return
	}
	rerr = c.readStep3( /*2 read ackcflow2 */ )
	if rerr != nil {
		return
	}
	pflow2, rerr := c.readStep4() // read pflow2
	if rerr != nil {
		return
	}
	presessionkey, rerr := c.pflowConcatAndDecrypt(pflow1, pflow2)
	if rerr != nil {
		c.wNotifiedSignal <- false
		return
	}
	rerr = c.recheckHash(presessionkey)
	if rerr != nil {
		c.wNotifiedSignal <- false
		return
	}
	rerr = c.readChallenge(presessionkey)
	if rerr != nil {
		c.wNotifiedSignal <- false
		return
	}
	c.wNotifiedSignal <- true
	rerr = c.readFinish()
	return
}

func (c *Client) shakeHandWriteCoroutine() (werr error) {
	if config.GlobalClientConfiguration == nil {
		werr = errors.New(`configuration has not been set up`)
		c.wNotifiedSignal <- false
		c.MiProxy.CloseConn()
		return
	}
	asym_cfg := config.GlobalClientConfiguration.Local.AsymmetricCipher
	flow_cfg := config.GlobalClientConfiguration.Local.StreamCipher
	hash_cfg := config.GlobalClientConfiguration.Local.HashCipher
	zip_cfg := config.GlobalClientConfiguration.Local.CompressedAlgorithm
	access_token := config.GlobalClientConfiguration.Local.AccessToken

	werr = c.SendClientHelloPayload(asym_cfg, flow_cfg, hash_cfg, zip_cfg, access_token)
	if werr != nil {
		c.wNotifiedSignal <- false
		c.MiProxy.CloseConn()
		return
	}
	c.wNotifiedSignal <- true
	werr = c.writeStep1()
	if werr != nil {
		return
	}
	werr = c.writeStep2()
	if werr != nil {
		return
	}
	c.rn, werr = c.generateRN()
	if werr != nil {
		c.MiProxy.CloseConn()
		return
	}
	enc_rn, err := c.pPubEncryptHandShakeMsg(c.rn)
	if err != nil {
		c.MiProxy.CloseConn()
		return
	}
	flow1, flow2 := utils.BytesSplitInHalfChanceField(enc_rn)
	werr = c.writeStep3(flow1, 1 /* send cflow1 */)
	if werr != nil {
		return
	}
	werr = c.writeStep4(1 /* send ackpflow1 */)
	if werr != nil {
		return
	}
	werr = c.writeStep3(flow2, 2 /* send cflow2 */)
	if werr != nil {
		return
	}
	werr = c.writeStep4(2 /* send ackpflow2 */)
	if werr != nil {
		return
	}
	if !<-c.wNotifiedSignal {
		werr = errors.New(`handshake failed in the middle knowing from reader coroutine`)
		return
	}
	werr = c.writeFinish()
	return
}

func (c *Client) clientAddrSpliter() (string, string) {
	domain := c.MiProxy.Conn.RemoteAddr().String()
	pos := utils.FindPosCutNetworkAddrPort(domain)
	return domain[:pos], domain[pos:]
}

func (c *Client) checkChan() bool {
	return c.rDoneSignal == nil || c.wNeedBytes == nil
}

/*
todo: `ping` is not the final silver bullet for network connectivity due to several ineluctable issues.

	we need other protocols to dress up as pingers or resolve conflicts on current spot.
	Model-Free Adaptive Predictive Control... ?
*/
func (c *Client) Shakehand() (werr error, rerr error) {
	if c.checkChan() {
		c.initChannel()
	}
	defer c.DeleteChannel()
	ip, _ /* port */ := c.clientAddrSpliter()
	ping_ref, ok := service.PingWithoutPrint(ip, 3, 4, 5, 5)
	if !ok {
		werr = errors.New(custom.BI_FAILED_TO_PING)
		rerr = errors.New(custom.BI_FAILED_TO_PING)
		return
	}
	c.pingRef = ping_ref

	wch, rch := make(chan error), make(chan error)
	c.ackTimCheck, c.ackRec = new([8][]byte), 0

	defer func() {
		c.ackRec, c.ackTimCheck = 0, nil
		c.rn = nil
	}()
	go func() { rch <- c.shakeHandReadCoroutine(); close(rch) }()
	go func() { wch <- c.shakeHandWriteCoroutine(); close(wch) }()
	werr, rerr = <-wch, <-rch

	return
}
